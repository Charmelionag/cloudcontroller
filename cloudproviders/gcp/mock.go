// Code generated by MockGen. DO NOT EDIT.
// Source: cloudproviders/gcp/gcp.go

// Package gcp is a generated GoMock package.
package gcp

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	compute "google.golang.org/api/compute/v1"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// CreateNetwork mocks base method.
func (m *MockServiceInterface) CreateNetwork(ctx context.Context, network *compute.Network) (*compute.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", ctx, network)
	ret0, _ := ret[0].(*compute.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockServiceInterfaceMockRecorder) CreateNetwork(ctx, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockServiceInterface)(nil).CreateNetwork), ctx, network)
}

// DeleteNetwork mocks base method.
func (m *MockServiceInterface) DeleteNetwork(ctx context.Context, nid string) (*compute.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", ctx, nid)
	ret0, _ := ret[0].(*compute.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockServiceInterfaceMockRecorder) DeleteNetwork(ctx, nid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockServiceInterface)(nil).DeleteNetwork), ctx, nid)
}

// GetNetwork mocks base method.
func (m *MockServiceInterface) GetNetwork(ctx context.Context, nid string) (*compute.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", ctx, nid)
	ret0, _ := ret[0].(*compute.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockServiceInterfaceMockRecorder) GetNetwork(ctx, nid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockServiceInterface)(nil).GetNetwork), ctx, nid)
}

// ListInstances mocks base method.
func (m *MockServiceInterface) ListInstances(ctx context.Context, project, zone string) (*compute.InstanceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", ctx, project, zone)
	ret0, _ := ret[0].(*compute.InstanceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockServiceInterfaceMockRecorder) ListInstances(ctx, project, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockServiceInterface)(nil).ListInstances), ctx, project, zone)
}

// ListNetworks mocks base method.
func (m *MockServiceInterface) ListNetworks(ctx context.Context, project string) (*compute.NetworkList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNetworks", ctx, project)
	ret0, _ := ret[0].(*compute.NetworkList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNetworks indicates an expected call of ListNetworks.
func (mr *MockServiceInterfaceMockRecorder) ListNetworks(ctx, project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNetworks", reflect.TypeOf((*MockServiceInterface)(nil).ListNetworks), ctx, project)
}
