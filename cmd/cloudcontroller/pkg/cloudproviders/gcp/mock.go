// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cloudproviders/gcp/client.go

// Package gcp is a generated GoMock package.
package gcp

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "google.golang.org/api/compute/v1"
	v10 "google.golang.org/api/container/v1"
	googleapi "google.golang.org/api/googleapi"
)

// MockInstancesInterface is a mock of InstancesInterface interface.
type MockInstancesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInstancesInterfaceMockRecorder
}

// MockInstancesInterfaceMockRecorder is the mock recorder for MockInstancesInterface.
type MockInstancesInterfaceMockRecorder struct {
	mock *MockInstancesInterface
}

// NewMockInstancesInterface creates a new mock instance.
func NewMockInstancesInterface(ctrl *gomock.Controller) *MockInstancesInterface {
	mock := &MockInstancesInterface{ctrl: ctrl}
	mock.recorder = &MockInstancesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstancesInterface) EXPECT() *MockInstancesInterfaceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockInstancesInterface) List(project, zone string) ListInstancesInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", project, zone)
	ret0, _ := ret[0].(ListInstancesInterface)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockInstancesInterfaceMockRecorder) List(project, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstancesInterface)(nil).List), project, zone)
}

// MockNetworksInterface is a mock of NetworksInterface interface.
type MockNetworksInterface struct {
	ctrl     *gomock.Controller
	recorder *MockNetworksInterfaceMockRecorder
}

// MockNetworksInterfaceMockRecorder is the mock recorder for MockNetworksInterface.
type MockNetworksInterfaceMockRecorder struct {
	mock *MockNetworksInterface
}

// NewMockNetworksInterface creates a new mock instance.
func NewMockNetworksInterface(ctrl *gomock.Controller) *MockNetworksInterface {
	mock := &MockNetworksInterface{ctrl: ctrl}
	mock.recorder = &MockNetworksInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworksInterface) EXPECT() *MockNetworksInterfaceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockNetworksInterface) Delete(project, network string) DeleteNetworksInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", project, network)
	ret0, _ := ret[0].(DeleteNetworksInterface)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockNetworksInterfaceMockRecorder) Delete(project, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNetworksInterface)(nil).Delete), project, network)
}

// Get mocks base method.
func (m *MockNetworksInterface) Get(project, network string) GetNetworksInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", project, network)
	ret0, _ := ret[0].(GetNetworksInterface)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockNetworksInterfaceMockRecorder) Get(project, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworksInterface)(nil).Get), project, network)
}

// Insert mocks base method.
func (m *MockNetworksInterface) Insert(project string, network *v1.Network) CreateNetworksInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", project, network)
	ret0, _ := ret[0].(CreateNetworksInterface)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockNetworksInterfaceMockRecorder) Insert(project, network interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockNetworksInterface)(nil).Insert), project, network)
}

// List mocks base method.
func (m *MockNetworksInterface) List(project string) ListNetworksInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", project)
	ret0, _ := ret[0].(ListNetworksInterface)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockNetworksInterfaceMockRecorder) List(project interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworksInterface)(nil).List), project)
}

// MockClustersInterface is a mock of ClustersInterface interface.
type MockClustersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClustersInterfaceMockRecorder
}

// MockClustersInterfaceMockRecorder is the mock recorder for MockClustersInterface.
type MockClustersInterfaceMockRecorder struct {
	mock *MockClustersInterface
}

// NewMockClustersInterface creates a new mock instance.
func NewMockClustersInterface(ctrl *gomock.Controller) *MockClustersInterface {
	mock := &MockClustersInterface{ctrl: ctrl}
	mock.recorder = &MockClustersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClustersInterface) EXPECT() *MockClustersInterfaceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockClustersInterface) List(project, zone string) ListClustersInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", project, zone)
	ret0, _ := ret[0].(ListClustersInterface)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClustersInterfaceMockRecorder) List(project, zone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClustersInterface)(nil).List), project, zone)
}

// MockListInstancesInterface is a mock of ListInstancesInterface interface.
type MockListInstancesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListInstancesInterfaceMockRecorder
}

// MockListInstancesInterfaceMockRecorder is the mock recorder for MockListInstancesInterface.
type MockListInstancesInterfaceMockRecorder struct {
	mock *MockListInstancesInterface
}

// NewMockListInstancesInterface creates a new mock instance.
func NewMockListInstancesInterface(ctrl *gomock.Controller) *MockListInstancesInterface {
	mock := &MockListInstancesInterface{ctrl: ctrl}
	mock.recorder = &MockListInstancesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListInstancesInterface) EXPECT() *MockListInstancesInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockListInstancesInterface) Do(opts ...googleapi.CallOption) (*v1.InstanceList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.InstanceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockListInstancesInterfaceMockRecorder) Do(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockListInstancesInterface)(nil).Do), opts...)
}

// MockListNetworksInterface is a mock of ListNetworksInterface interface.
type MockListNetworksInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListNetworksInterfaceMockRecorder
}

// MockListNetworksInterfaceMockRecorder is the mock recorder for MockListNetworksInterface.
type MockListNetworksInterfaceMockRecorder struct {
	mock *MockListNetworksInterface
}

// NewMockListNetworksInterface creates a new mock instance.
func NewMockListNetworksInterface(ctrl *gomock.Controller) *MockListNetworksInterface {
	mock := &MockListNetworksInterface{ctrl: ctrl}
	mock.recorder = &MockListNetworksInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListNetworksInterface) EXPECT() *MockListNetworksInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockListNetworksInterface) Do(opts ...googleapi.CallOption) (*v1.NetworkList, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.NetworkList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockListNetworksInterfaceMockRecorder) Do(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockListNetworksInterface)(nil).Do), opts...)
}

// MockGetNetworksInterface is a mock of GetNetworksInterface interface.
type MockGetNetworksInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGetNetworksInterfaceMockRecorder
}

// MockGetNetworksInterfaceMockRecorder is the mock recorder for MockGetNetworksInterface.
type MockGetNetworksInterfaceMockRecorder struct {
	mock *MockGetNetworksInterface
}

// NewMockGetNetworksInterface creates a new mock instance.
func NewMockGetNetworksInterface(ctrl *gomock.Controller) *MockGetNetworksInterface {
	mock := &MockGetNetworksInterface{ctrl: ctrl}
	mock.recorder = &MockGetNetworksInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetNetworksInterface) EXPECT() *MockGetNetworksInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockGetNetworksInterface) Do(opts ...googleapi.CallOption) (*v1.Network, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockGetNetworksInterfaceMockRecorder) Do(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockGetNetworksInterface)(nil).Do), opts...)
}

// MockCreateNetworksInterface is a mock of CreateNetworksInterface interface.
type MockCreateNetworksInterface struct {
	ctrl     *gomock.Controller
	recorder *MockCreateNetworksInterfaceMockRecorder
}

// MockCreateNetworksInterfaceMockRecorder is the mock recorder for MockCreateNetworksInterface.
type MockCreateNetworksInterfaceMockRecorder struct {
	mock *MockCreateNetworksInterface
}

// NewMockCreateNetworksInterface creates a new mock instance.
func NewMockCreateNetworksInterface(ctrl *gomock.Controller) *MockCreateNetworksInterface {
	mock := &MockCreateNetworksInterface{ctrl: ctrl}
	mock.recorder = &MockCreateNetworksInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCreateNetworksInterface) EXPECT() *MockCreateNetworksInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockCreateNetworksInterface) Do(opts ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockCreateNetworksInterfaceMockRecorder) Do(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockCreateNetworksInterface)(nil).Do), opts...)
}

// MockDeleteNetworksInterface is a mock of DeleteNetworksInterface interface.
type MockDeleteNetworksInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteNetworksInterfaceMockRecorder
}

// MockDeleteNetworksInterfaceMockRecorder is the mock recorder for MockDeleteNetworksInterface.
type MockDeleteNetworksInterfaceMockRecorder struct {
	mock *MockDeleteNetworksInterface
}

// NewMockDeleteNetworksInterface creates a new mock instance.
func NewMockDeleteNetworksInterface(ctrl *gomock.Controller) *MockDeleteNetworksInterface {
	mock := &MockDeleteNetworksInterface{ctrl: ctrl}
	mock.recorder = &MockDeleteNetworksInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteNetworksInterface) EXPECT() *MockDeleteNetworksInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockDeleteNetworksInterface) Do(opts ...googleapi.CallOption) (*v1.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v1.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockDeleteNetworksInterfaceMockRecorder) Do(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockDeleteNetworksInterface)(nil).Do), opts...)
}

// MockListClustersInterface is a mock of ListClustersInterface interface.
type MockListClustersInterface struct {
	ctrl     *gomock.Controller
	recorder *MockListClustersInterfaceMockRecorder
}

// MockListClustersInterfaceMockRecorder is the mock recorder for MockListClustersInterface.
type MockListClustersInterfaceMockRecorder struct {
	mock *MockListClustersInterface
}

// NewMockListClustersInterface creates a new mock instance.
func NewMockListClustersInterface(ctrl *gomock.Controller) *MockListClustersInterface {
	mock := &MockListClustersInterface{ctrl: ctrl}
	mock.recorder = &MockListClustersInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListClustersInterface) EXPECT() *MockListClustersInterfaceMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockListClustersInterface) Do(opts ...googleapi.CallOption) (*v10.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Do", varargs...)
	ret0, _ := ret[0].(*v10.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockListClustersInterfaceMockRecorder) Do(opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockListClustersInterface)(nil).Do), opts...)
}
